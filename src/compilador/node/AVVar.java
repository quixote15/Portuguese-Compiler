/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AVVar extends PVar
{
    private PVarVirgula _varVirgula_;
    private PVariavel _variavel_;

    public AVVar()
    {
        // Constructor
    }

    public AVVar(
        @SuppressWarnings("hiding") PVarVirgula _varVirgula_,
        @SuppressWarnings("hiding") PVariavel _variavel_)
    {
        // Constructor
        setVarVirgula(_varVirgula_);

        setVariavel(_variavel_);

    }

    @Override
    public Object clone()
    {
        return new AVVar(
            cloneNode(this._varVirgula_),
            cloneNode(this._variavel_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVVar(this);
    }

    public PVarVirgula getVarVirgula()
    {
        return this._varVirgula_;
    }

    public void setVarVirgula(PVarVirgula node)
    {
        if(this._varVirgula_ != null)
        {
            this._varVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varVirgula_ = node;
    }

    public PVariavel getVariavel()
    {
        return this._variavel_;
    }

    public void setVariavel(PVariavel node)
    {
        if(this._variavel_ != null)
        {
            this._variavel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variavel_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varVirgula_)
            + toString(this._variavel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varVirgula_ == child)
        {
            this._varVirgula_ = null;
            return;
        }

        if(this._variavel_ == child)
        {
            this._variavel_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varVirgula_ == oldChild)
        {
            setVarVirgula((PVarVirgula) newChild);
            return;
        }

        if(this._variavel_ == oldChild)
        {
            setVariavel((PVariavel) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
