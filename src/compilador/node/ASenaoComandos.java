/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ASenaoComandos extends PComandos
{
    private PExpressaoLogica _expressaoLogica_;
    private final LinkedList<PComandos> _esquerda_ = new LinkedList<PComandos>();
    private final LinkedList<PComandos> _direita_ = new LinkedList<PComandos>();

    public ASenaoComandos()
    {
        // Constructor
    }

    public ASenaoComandos(
        @SuppressWarnings("hiding") PExpressaoLogica _expressaoLogica_,
        @SuppressWarnings("hiding") List<?> _esquerda_,
        @SuppressWarnings("hiding") List<?> _direita_)
    {
        // Constructor
        setExpressaoLogica(_expressaoLogica_);

        setEsquerda(_esquerda_);

        setDireita(_direita_);

    }

    @Override
    public Object clone()
    {
        return new ASenaoComandos(
            cloneNode(this._expressaoLogica_),
            cloneList(this._esquerda_),
            cloneList(this._direita_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASenaoComandos(this);
    }

    public PExpressaoLogica getExpressaoLogica()
    {
        return this._expressaoLogica_;
    }

    public void setExpressaoLogica(PExpressaoLogica node)
    {
        if(this._expressaoLogica_ != null)
        {
            this._expressaoLogica_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressaoLogica_ = node;
    }

    public LinkedList<PComandos> getEsquerda()
    {
        return this._esquerda_;
    }

    public void setEsquerda(List<?> list)
    {
        for(PComandos e : this._esquerda_)
        {
            e.parent(null);
        }
        this._esquerda_.clear();

        for(Object obj_e : list)
        {
            PComandos e = (PComandos) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._esquerda_.add(e);
        }
    }

    public LinkedList<PComandos> getDireita()
    {
        return this._direita_;
    }

    public void setDireita(List<?> list)
    {
        for(PComandos e : this._direita_)
        {
            e.parent(null);
        }
        this._direita_.clear();

        for(Object obj_e : list)
        {
            PComandos e = (PComandos) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._direita_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressaoLogica_)
            + toString(this._esquerda_)
            + toString(this._direita_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressaoLogica_ == child)
        {
            this._expressaoLogica_ = null;
            return;
        }

        if(this._esquerda_.remove(child))
        {
            return;
        }

        if(this._direita_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressaoLogica_ == oldChild)
        {
            setExpressaoLogica((PExpressaoLogica) newChild);
            return;
        }

        for(ListIterator<PComandos> i = this._esquerda_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandos) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComandos> i = this._direita_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandos) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
