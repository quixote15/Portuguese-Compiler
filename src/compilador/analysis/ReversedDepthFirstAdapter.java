/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAlgoritmo().apply(this);
        outStart(node);
    }

    public void inAAlgoritmo(AAlgoritmo node)
    {
        defaultIn(node);
    }

    public void outAAlgoritmo(AAlgoritmo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlgoritmo(AAlgoritmo node)
    {
        inAAlgoritmo(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAAlgoritmo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAIdVariavel(AIdVariavel node)
    {
        defaultIn(node);
    }

    public void outAIdVariavel(AIdVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariavel(AIdVariavel node)
    {
        inAIdVariavel(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVariavel(node);
    }

    public void inAVetorVariavel(AVetorVariavel node)
    {
        defaultIn(node);
    }

    public void outAVetorVariavel(AVetorVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariavel(AVetorVariavel node)
    {
        inAVetorVariavel(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAVetorVariavel(node);
    }

    public void inAVVar(AVVar node)
    {
        defaultIn(node);
    }

    public void outAVVar(AVVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVVar(AVVar node)
    {
        inAVVar(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getVarVirgula() != null)
        {
            node.getVarVirgula().apply(this);
        }
        outAVVar(node);
    }

    public void inAVirgulaVarVirgula(AVirgulaVarVirgula node)
    {
        defaultIn(node);
    }

    public void outAVirgulaVarVirgula(AVirgulaVarVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaVarVirgula(AVirgulaVarVirgula node)
    {
        inAVirgulaVarVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVirgulaVarVirgula(node);
    }

    public void inAEmptyVarVirgula(AEmptyVarVirgula node)
    {
        defaultIn(node);
    }

    public void outAEmptyVarVirgula(AEmptyVarVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVarVirgula(AEmptyVarVirgula node)
    {
        inAEmptyVarVirgula(node);
        outAEmptyVarVirgula(node);
    }

    public void inADeclDeclaracao(ADeclDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclDeclaracao(ADeclDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclDeclaracao(ADeclDeclaracao node)
    {
        inADeclDeclaracao(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outADeclDeclaracao(node);
    }

    public void inANumeroValor(ANumeroValor node)
    {
        defaultIn(node);
    }

    public void outANumeroValor(ANumeroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroValor(ANumeroValor node)
    {
        inANumeroValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroValor(node);
    }

    public void inANumeroRealValor(ANumeroRealValor node)
    {
        defaultIn(node);
    }

    public void outANumeroRealValor(ANumeroRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealValor(ANumeroRealValor node)
    {
        inANumeroRealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumeroRealValor(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAExpAriExp(AExpAriExp node)
    {
        defaultIn(node);
    }

    public void outAExpAriExp(AExpAriExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAriExp(AExpAriExp node)
    {
        inAExpAriExp(node);
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        outAExpAriExp(node);
    }

    public void inAExpLogExp(AExpLogExp node)
    {
        defaultIn(node);
    }

    public void outAExpLogExp(AExpLogExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogExp(AExpLogExp node)
    {
        inAExpLogExp(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        outAExpLogExp(node);
    }

    public void inAVirgulaAriExpVirgula(AVirgulaAriExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAVirgulaAriExpVirgula(AVirgulaAriExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaAriExpVirgula(AVirgulaAriExpVirgula node)
    {
        inAVirgulaAriExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        outAVirgulaAriExpVirgula(node);
    }

    public void inAVirgulaLogExpVirgula(AVirgulaLogExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAVirgulaLogExpVirgula(AVirgulaLogExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaLogExpVirgula(AVirgulaLogExpVirgula node)
    {
        inAVirgulaLogExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAVirgulaLogExpVirgula(node);
    }

    public void inAEmptyExpVirgula(AEmptyExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpVirgula(AEmptyExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpVirgula(AEmptyExpVirgula node)
    {
        inAEmptyExpVirgula(node);
        outAEmptyExpVirgula(node);
    }

    public void inASomaExpressaoAritmetica(ASomaExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outASomaExpressaoAritmetica(ASomaExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpressaoAritmetica(ASomaExpressaoAritmetica node)
    {
        inASomaExpressaoAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outASomaExpressaoAritmetica(node);
    }

    public void inASubtracaoExpressaoAritmetica(ASubtracaoExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExpressaoAritmetica(ASubtracaoExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExpressaoAritmetica(ASubtracaoExpressaoAritmetica node)
    {
        inASubtracaoExpressaoAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outASubtracaoExpressaoAritmetica(node);
    }

    public void inAMenosExpressaoAritmetica(AMenosExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outAMenosExpressaoAritmetica(AMenosExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpressaoAritmetica(AMenosExpressaoAritmetica node)
    {
        inAMenosExpressaoAritmetica(node);
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        outAMenosExpressaoAritmetica(node);
    }

    public void inAMultiplicacaoExpressaoAritmetica(AMultiplicacaoExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoExpressaoAritmetica(AMultiplicacaoExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoExpressaoAritmetica(AMultiplicacaoExpressaoAritmetica node)
    {
        inAMultiplicacaoExpressaoAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMultiplicacaoExpressaoAritmetica(node);
    }

    public void inADivisaoExpressaoAritmetica(ADivisaoExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outADivisaoExpressaoAritmetica(ADivisaoExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExpressaoAritmetica(ADivisaoExpressaoAritmetica node)
    {
        inADivisaoExpressaoAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outADivisaoExpressaoAritmetica(node);
    }

    public void inAParenteseAritmeticaExpressaoAritmetica(AParenteseAritmeticaExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outAParenteseAritmeticaExpressaoAritmetica(AParenteseAritmeticaExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenteseAritmeticaExpressaoAritmetica(AParenteseAritmeticaExpressaoAritmetica node)
    {
        inAParenteseAritmeticaExpressaoAritmetica(node);
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        outAParenteseAritmeticaExpressaoAritmetica(node);
    }

    public void inAVariavelExpressaoAritmetica(AVariavelExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outAVariavelExpressaoAritmetica(AVariavelExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExpressaoAritmetica(AVariavelExpressaoAritmetica node)
    {
        inAVariavelExpressaoAritmetica(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelExpressaoAritmetica(node);
    }

    public void inAValorExpressaoAritmetica(AValorExpressaoAritmetica node)
    {
        defaultIn(node);
    }

    public void outAValorExpressaoAritmetica(AValorExpressaoAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpressaoAritmetica(AValorExpressaoAritmetica node)
    {
        inAValorExpressaoAritmetica(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpressaoAritmetica(node);
    }

    public void inAEExpressaoLogica(AEExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpressaoLogica(AEExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpressaoLogica(AEExpressaoLogica node)
    {
        inAEExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAEExpressaoLogica(node);
    }

    public void inAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        inAOuExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAOuExpressaoLogica(node);
    }

    public void inAEouExpressaoLogica(AEouExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAEouExpressaoLogica(AEouExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEouExpressaoLogica(AEouExpressaoLogica node)
    {
        inAEouExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAEouExpressaoLogica(node);
    }

    public void inANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        inANaoExpressaoLogica(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outANaoExpressaoLogica(node);
    }

    public void inAParenteseLogicaExpressaoLogica(AParenteseLogicaExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAParenteseLogicaExpressaoLogica(AParenteseLogicaExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenteseLogicaExpressaoLogica(AParenteseLogicaExpressaoLogica node)
    {
        inAParenteseLogicaExpressaoLogica(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAParenteseLogicaExpressaoLogica(node);
    }

    public void inAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        inAIgualExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAIgualExpressaoLogica(node);
    }

    public void inADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        inADiferenteExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outADiferenteExpressaoLogica(node);
    }

    public void inAMaiorQExpressaoLogica(AMaiorQExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorQExpressaoLogica(AMaiorQExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorQExpressaoLogica(AMaiorQExpressaoLogica node)
    {
        inAMaiorQExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorQExpressaoLogica(node);
    }

    public void inAMenorQExpressaoLogica(AMenorQExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorQExpressaoLogica(AMenorQExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQExpressaoLogica(AMenorQExpressaoLogica node)
    {
        inAMenorQExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMenorQExpressaoLogica(node);
    }

    public void inAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        inAMaiorIgualExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorIgualExpressaoLogica(node);
    }

    public void inAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        inAMenorIgualExpressaoLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMenorIgualExpressaoLogica(node);
    }

    public void inAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        inAAtribuicaoComandos(node);
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAAtribuicaoComandos(node);
    }

    public void inALeiaComandos(ALeiaComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaComandos(ALeiaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComandos(ALeiaComandos node)
    {
        inALeiaComandos(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outALeiaComandos(node);
    }

    public void inAEscrevaComandos(AEscrevaComandos node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComandos(AEscrevaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComandos(AEscrevaComandos node)
    {
        inAEscrevaComandos(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAEscrevaComandos(node);
    }

    public void inASeComandos(ASeComandos node)
    {
        defaultIn(node);
    }

    public void outASeComandos(ASeComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandos(ASeComandos node)
    {
        inASeComandos(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outASeComandos(node);
    }

    public void inASenaoComandos(ASenaoComandos node)
    {
        defaultIn(node);
    }

    public void outASenaoComandos(ASenaoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoComandos(ASenaoComandos node)
    {
        inASenaoComandos(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getDireita());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getEsquerda());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outASenaoComandos(node);
    }

    public void inAAvalieComandos(AAvalieComandos node)
    {
        defaultIn(node);
    }

    public void outAAvalieComandos(AAvalieComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComandos(AAvalieComandos node)
    {
        inAAvalieComandos(node);
        if(node.getExpressaoAritmetica() != null)
        {
            node.getExpressaoAritmetica().apply(this);
        }
        outAAvalieComandos(node);
    }

    public void inAEnquantoComandos(AEnquantoComandos node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandos(AEnquantoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandos(AEnquantoComandos node)
    {
        inAEnquantoComandos(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAEnquantoComandos(node);
    }

    public void inARepitaComandos(ARepitaComandos node)
    {
        defaultIn(node);
    }

    public void outARepitaComandos(ARepitaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComandos(ARepitaComandos node)
    {
        inARepitaComandos(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        outARepitaComandos(node);
    }

    public void inAParaComandos(AParaComandos node)
    {
        defaultIn(node);
    }

    public void outAParaComandos(AParaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComandos(AParaComandos node)
    {
        inAParaComandos(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAParaComandos(node);
    }

    public void inAParaPassoComandos(AParaPassoComandos node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComandos(AParaPassoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComandos(AParaPassoComandos node)
    {
        inAParaPassoComandos(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPassos() != null)
        {
            node.getPassos().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAParaPassoComandos(node);
    }

    public void inASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        defaultIn(node);
    }

    public void outASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        inASenaoSeSenaoSe(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoSeSenaoSe(node);
    }

    public void inACasoPCaso(ACasoPCaso node)
    {
        defaultIn(node);
    }

    public void outACasoPCaso(ACasoPCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoPCaso(ACasoPCaso node)
    {
        inACasoPCaso(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoPCaso(node);
    }

    public void inASenaoCasoSenaoPCaso(ASenaoCasoSenaoPCaso node)
    {
        defaultIn(node);
    }

    public void outASenaoCasoSenaoPCaso(ASenaoCasoSenaoPCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoCasoSenaoPCaso(ASenaoCasoSenaoPCaso node)
    {
        inASenaoCasoSenaoPCaso(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoCasoSenaoPCaso(node);
    }
}
