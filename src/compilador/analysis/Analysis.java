/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAlgoritmo(AAlgoritmo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseARealTipo(ARealTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAIdVariavel(AIdVariavel node);
    void caseAVetorVariavel(AVetorVariavel node);
    void caseAVVar(AVVar node);
    void caseAVirgulaVarVirgula(AVirgulaVarVirgula node);
    void caseAEmptyVarVirgula(AEmptyVarVirgula node);
    void caseADeclDeclaracao(ADeclDeclaracao node);
    void caseANumeroValor(ANumeroValor node);
    void caseANumeroRealValor(ANumeroRealValor node);
    void caseAStringValor(AStringValor node);
    void caseAExpAriExp(AExpAriExp node);
    void caseAExpLogExp(AExpLogExp node);
    void caseAVirgulaAriExpVirgula(AVirgulaAriExpVirgula node);
    void caseAVirgulaLogExpVirgula(AVirgulaLogExpVirgula node);
    void caseAEmptyExpVirgula(AEmptyExpVirgula node);
    void caseASomaExpressaoAritmetica(ASomaExpressaoAritmetica node);
    void caseASubtracaoExpressaoAritmetica(ASubtracaoExpressaoAritmetica node);
    void caseAMenosExpressaoAritmetica(AMenosExpressaoAritmetica node);
    void caseAMultiplicacaoExpressaoAritmetica(AMultiplicacaoExpressaoAritmetica node);
    void caseADivisaoExpressaoAritmetica(ADivisaoExpressaoAritmetica node);
    void caseAParenteseAritmeticaExpressaoAritmetica(AParenteseAritmeticaExpressaoAritmetica node);
    void caseAVariavelExpressaoAritmetica(AVariavelExpressaoAritmetica node);
    void caseAValorExpressaoAritmetica(AValorExpressaoAritmetica node);
    void caseAEExpressaoLogica(AEExpressaoLogica node);
    void caseAOuExpressaoLogica(AOuExpressaoLogica node);
    void caseAEouExpressaoLogica(AEouExpressaoLogica node);
    void caseANaoExpressaoLogica(ANaoExpressaoLogica node);
    void caseAParenteseLogicaExpressaoLogica(AParenteseLogicaExpressaoLogica node);
    void caseAIgualExpressaoLogica(AIgualExpressaoLogica node);
    void caseADiferenteExpressaoLogica(ADiferenteExpressaoLogica node);
    void caseAMaiorQExpressaoLogica(AMaiorQExpressaoLogica node);
    void caseAMenorQExpressaoLogica(AMenorQExpressaoLogica node);
    void caseAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node);
    void caseAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node);
    void caseAAtribuicaoComandos(AAtribuicaoComandos node);
    void caseALeiaComandos(ALeiaComandos node);
    void caseAEscrevaComandos(AEscrevaComandos node);
    void caseASeComandos(ASeComandos node);
    void caseASenaoComandos(ASenaoComandos node);
    void caseAAvalieComandos(AAvalieComandos node);
    void caseAEnquantoComandos(AEnquantoComandos node);
    void caseARepitaComandos(ARepitaComandos node);
    void caseAParaComandos(AParaComandos node);
    void caseAParaPassoComandos(AParaPassoComandos node);
    void caseASenaoSeSenaoSe(ASenaoSeSenaoSe node);
    void caseACasoPCaso(ACasoPCaso node);
    void caseASenaoCasoSenaoPCaso(ASenaoCasoSenaoPCaso node);

    void caseTPonto(TPonto node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTEParentese(TEParentese node);
    void caseTDParentese(TDParentese node);
    void caseTEColchete(TEColchete node);
    void caseTDColchete(TDColchete node);
    void caseTEChave(TEChave node);
    void caseTDChave(TDChave node);
    void caseTMenos(TMenos node);
    void caseTSoma(TSoma node);
    void caseTSubtracao(TSubtracao node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMaiorQ(TMaiorQ node);
    void caseTMenorQ(TMenorQ node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTNao(TNao node);
    void caseTEou(TEou node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimSe(TFimSe node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTFimPara(TFimPara node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTFimRepita(TFimRepita node);
    void caseTId(TId node);
    void caseTNumero(TNumero node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTString(TString node);
    void caseTConstante(TConstante node);
    void caseTBlank(TBlank node);
    void caseTComentario(TComentario node);
    void caseTComentarioAninhado(TComentarioAninhado node);
    void caseTComentarioAninhadoFim(TComentarioAninhadoFim node);
    void caseTEstrela(TEstrela node);
    void caseTBarraInclinada(TBarraInclinada node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
