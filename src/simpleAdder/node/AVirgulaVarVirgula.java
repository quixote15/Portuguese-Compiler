/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AVirgulaVarVirgula extends PVarVirgula
{
    private PVariavel _variavel_;
    private TVirg _virg_;

    public AVirgulaVarVirgula()
    {
        // Constructor
    }

    public AVirgulaVarVirgula(
        @SuppressWarnings("hiding") PVariavel _variavel_,
        @SuppressWarnings("hiding") TVirg _virg_)
    {
        // Constructor
        setVariavel(_variavel_);

        setVirg(_virg_);

    }

    @Override
    public Object clone()
    {
        return new AVirgulaVarVirgula(
            cloneNode(this._variavel_),
            cloneNode(this._virg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVirgulaVarVirgula(this);
    }

    public PVariavel getVariavel()
    {
        return this._variavel_;
    }

    public void setVariavel(PVariavel node)
    {
        if(this._variavel_ != null)
        {
            this._variavel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variavel_ = node;
    }

    public TVirg getVirg()
    {
        return this._virg_;
    }

    public void setVirg(TVirg node)
    {
        if(this._virg_ != null)
        {
            this._virg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._virg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variavel_)
            + toString(this._virg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variavel_ == child)
        {
            this._variavel_ = null;
            return;
        }

        if(this._virg_ == child)
        {
            this._virg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._variavel_ == oldChild)
        {
            setVariavel((PVariavel) newChild);
            return;
        }

        if(this._virg_ == oldChild)
        {
            setVirg((TVirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
