/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import java.util.*;
import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class ALeiaComando extends PComando
{
    private final LinkedList<PListVar> _listVar_ = new LinkedList<PListVar>();
    private PVar _var_;

    public ALeiaComando()
    {
        // Constructor
    }

    public ALeiaComando(
        @SuppressWarnings("hiding") List<?> _listVar_,
        @SuppressWarnings("hiding") PVar _var_)
    {
        // Constructor
        setListVar(_listVar_);

        setVar(_var_);

    }

    @Override
    public Object clone()
    {
        return new ALeiaComando(
            cloneList(this._listVar_),
            cloneNode(this._var_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALeiaComando(this);
    }

    public LinkedList<PListVar> getListVar()
    {
        return this._listVar_;
    }

    public void setListVar(List<?> list)
    {
        for(PListVar e : this._listVar_)
        {
            e.parent(null);
        }
        this._listVar_.clear();

        for(Object obj_e : list)
        {
            PListVar e = (PListVar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._listVar_.add(e);
        }
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listVar_)
            + toString(this._var_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listVar_.remove(child))
        {
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PListVar> i = this._listVar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PListVar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
