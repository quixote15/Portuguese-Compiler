/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import simpleAdder.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAVariaveisDeclaracao(AVariaveisDeclaracao node);
    void caseAConstantesDeclaracao(AConstantesDeclaracao node);
    void caseAIdDeclaracao(AIdDeclaracao node);
    void caseAIdVetorDeclaracao(AIdVetorDeclaracao node);
    void caseADefVar(ADefVar node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseARealTipo(ARealTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAAtribuicaoExpComando(AAtribuicaoExpComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseASeComando(ASeComando node);
    void caseASenaoComando(ASenaoComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAAvalieSenaoComando(AAvalieSenaoComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAParaPassoComando(AParaPassoComando node);
    void caseAIdVar(AIdVar node);
    void caseAIdVetorVar(AIdVetorVar node);
    void caseAVVariavel(AVVariavel node);
    void caseAVirgulaVarVirgula(AVirgulaVarVirgula node);
    void caseAEmptyVarVirgula(AEmptyVarVirgula node);
    void caseAListVar(AListVar node);
    void caseACasoCasoS(ACasoCasoS node);
    void caseAEstrCaso(AEstrCaso node);
    void caseAStringValor(AStringValor node);
    void caseAInteiroValor(AInteiroValor node);
    void caseARealValor(ARealValor node);
    void caseACharValor(ACharValor node);
    void caseAParentsValor(AParentsValor node);
    void caseAValorExp(AValorExp node);
    void caseAVarExp(AVarExp node);
    void caseAParentesesExp(AParentesesExp node);
    void caseAMaisExp(AMaisExp node);
    void caseAMenosExp(AMenosExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAIgualExp(AIgualExp node);
    void caseAMenosExpExp(AMenosExpExp node);
    void caseADiferenteExp(ADiferenteExp node);
    void caseAMenorqExp(AMenorqExp node);
    void caseAMaiorqExp(AMaiorqExp node);
    void caseAMenoriExp(AMenoriExp node);
    void caseAMaioriExp(AMaioriExp node);
    void caseANaoExp(ANaoExp node);
    void caseAXorExp(AXorExp node);
    void caseAOuExp(AOuExp node);
    void caseAEExp(AEExp node);
    void caseAParentesesExpLogica(AParentesesExpLogica node);
    void caseAVarExpLogica(AVarExpLogica node);
    void caseAValorExpLogica(AValorExpLogica node);

    void caseTNumInt(TNumInt node);
    void caseTNumReal(TNumReal node);
    void caseTBool(TBool node);
    void caseTChar(TChar node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTBooleano(TBooleano node);
    void caseTCaractere(TCaractere node);
    void caseTConstante(TConstante node);
    void caseTInicio(TInicio node);
    void caseTFimprograma(TFimprograma node);
    void caseTPrograma(TPrograma node);
    void caseTEscreva(TEscreva node);
    void caseTSe(TSe node);
    void caseTFaca(TFaca node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimse(TFimse node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimenquanto(TFimenquanto node);
    void caseTPara(TPara node);
    void caseTFimpara(TFimpara node);
    void caseTPasso(TPasso node);
    void caseTAvalie(TAvalie node);
    void caseTFimavalie(TFimavalie node);
    void caseTCaso(TCaso node);
    void caseTAColchete(TAColchete node);
    void caseTFColchete(TFColchete node);
    void caseTAParentese(TAParentese node);
    void caseTFParentese(TFParentese node);
    void caseTLeia(TLeia node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTDe(TDe node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTAtrib(TAtrib node);
    void caseTPontoevirg(TPontoevirg node);
    void caseTVirg(TVirg node);
    void caseTDoispontos(TDoispontos node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTMaiorq(TMaiorq node);
    void caseTMenorq(TMenorq node);
    void caseTMaiori(TMaiori node);
    void caseTMenori(TMenori node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTNovalinha(TNovalinha node);
    void caseTBlank(TBlank node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTComentarioBlocFimErrado(TComentarioBlocFimErrado node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseTComentLin(TComentLin node);
    void caseTId(TId node);
    void caseTIdentificador(TIdentificador node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
